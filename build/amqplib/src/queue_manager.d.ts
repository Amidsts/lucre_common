import { BroadcastRpcConfig, BroadcastSubscriberConfig, RpcConfig, RpcManagerConfig, SubscriberConfig } from './types';
declare class RpcManager {
    private questionPublishers;
    private broadcastPublishers;
    private taskPublishers;
    private connection;
    private static instance;
    private replyTo;
    private rpcEmitter;
    private questionSubscriberConfigs;
    private broadcastSubscriberConfigs;
    private taskSubscriberConfigs;
    private constructor();
    static setup(config: RpcManagerConfig, rmqUrl: string): Promise<RpcManager>;
    private openConnection;
    private createChannel;
    private setQuestionPublisher;
    publishQuestion<Q, A>(payload: Q, config: RpcConfig): Promise<A>;
    private getQuestionSubscriber;
    subscribeToQuestion(subscriberConfig: SubscriberConfig<any, any>): Promise<void>;
    private setTaskPublisher;
    publishTask<Q>(payload: Q, config: RpcConfig): Promise<void>;
    private getTaskSubscriber;
    subscribeToTask(subscriberConfig: SubscriberConfig<any, any>): Promise<void>;
    private setBroadcastPublisher;
    publishBroadcast<Q>(payload: Q, config: BroadcastRpcConfig): Promise<void>;
    private getBroadcastSubscriber;
    subscribeToBroadcast(subscriberConfig: BroadcastSubscriberConfig<any>): Promise<void>;
    private setupSubscribers;
    private setupRpcReplySubscriber;
}
export { RpcManager };
